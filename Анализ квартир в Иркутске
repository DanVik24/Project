#Импортируем библиотеки
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px

#показать всю информацию в колонках 
pd.set_option('display.max_colwidth', None)

#Загружаем данные 
data = pd.read_csv('C:/Users/admin/all/flat_3.csv', sep=';')

display(data.head())


# переименование столбцов для удобного использования 
data = data.rename(columns={'Количество комнат': 'rooms', 
                               'Тип': 'type', 
                               'район': 'district', 
                               'Адрес': 'address', 
                               'Площадь, м2': 'area',
                               'Этаж': 'floor', 
                               'Цена': 'price', 
                               'Ремонт': 'repair', 
                               'Ссылка на объявление': 'link'})
# смотрим основную информацию о датафрейме
display(data.info())

# просмотр уникальных данных в столбцах:
display(data['rooms'].unique())
display(data['type'].unique())
display(data['district'].unique())
display(data['repair'].unique())

# изменим столбец с данными о колве квартир - уберем лишнюю информацию
data['rooms'] = data['rooms'].str.replace(',', ' ').str.replace('\D', '', regex=True) # удаляет данные в ячейке после ","
data.sample(5)

# добавим столбец 'floor_all'
data['floor_all'] = data['floor'].str.split('/').str.get(1)
data['floor'] = data['floor'].str.split('/').str.get(0)
data['price_square'] = (data['price'] / data['area'])/1000 # создадим столбец "price_square" с данными о цене за кв.м. и 
data['price'] = data['price']/1000000  # поделим результат на 100 для лучшего восприятия цены

data['price'] = data['price'].round(1) #  округлим числа до десятых
data['price_square'] = data['price_square'].round(1)
data.sample(5) 

# изменим тип данных для дальнейшего исследовани в следующих столбцах
data['rooms'] = data['rooms'].fillna(0).astype('int')
data['floor'] = data['floor'].fillna(0).astype('int')

display(data.sample(5)) # проверим изменненые данные
display(data.info())

data_all['rooms'].unique() #поиск уникальных названий

# посчитаем пропуски
print('Количество дубликатов:', data.duplicated().sum())
print('Количие пропусков:')
data.isnull().sum() 

# замена пропусков
data['repair'] = data['repair'].fillna(0)

# районы
display(data['district'].value_counts())
data['district'].hist();

# посмотрим данные о типе квартир
data['type'].unique()
# Изменим столбец с данными о типе квартиры: заменим данные на "second" - вторичное жилье и "new" - новостройка.
data['type']
data = data.replace({'type':{'Продажа квартиры в новостройке':"new", 'Продажа квартиры': "second"}})
data.head()

# посмотрим данные о колличестве комнат
data['rooms'].unique()
data[data['rooms'] == 0] # квартиры где указанно кол-во комнат = 0
# По данным квартир с указаннием о количесве комнат = 0
# можем сделать предположение, что данные квартиры являются новостройками 
# со свободной планировкой. Оставим как есть.

display(data['rooms'].value_counts()) #посчитаем количество квартир в зависимости от количества комнат
data['rooms'].hist(figsize=(4,4)) #построим диаграмму 


#сгруппируем данные по району
data_district = data.pivot_table(index = 'district', values = 'ID', columns='rooms', aggfunc = 'count').reset_index().fillna(0)
display(data_district) 
display(data_district.info())

# строим гистограммы 

fig = px.histogram(data_district, # загружаем данные 
                   x=[0, 1, 2, 3, 4, 5], # указываем столбец с данными для оси X 
                   y= 'district',
                   title='Распределение') # указываем заголовок 
fig.update_layout(yaxis_title ='Районы') # подпись для оси X 
fig.update_layout(xaxis_title ='Количество комнат') # подпись для оси Y 
fig.show(); # выводим график

# В полученном результате видим преобладание однокомнатных квартир в любом из районов

# можем посмотреть колличество каких квартир продается, 
# новостроек или вторичного жилья, по районам
data_price4 = data.pivot_table(index = 'district', values = 'ID', columns='type', aggfunc = 'count').reset_index()
data_price4['%_new'] = 100*(data_price4['new'] / data_price4['new'].sum()).round(3)
data_price4['%_second'] = 100*(data_price4['second'] / data_price4['second'].sum()).round(3)
data_price4

# можем посмотреть колличество скольки комнатных квартир, 
# новостроек или вторичного жилья, в каких районах продается больше чем в остальных
data_price2 = data.pivot_table(index = ['district', 'rooms'], values = 'ID', columns='type', aggfunc = 'count')
data_price2

# цена за квартиру
data['price'].describe().round(3)

# цена за квадратный метр
display(data['price_square'].describe().round(1))
data['price_square'].hist(bins=100)  

# Средняя цена за квадратный метр - 67.3 т.р./кв. А максиматльная сумма за квадрат - 346.2 т.р./кв Посмотрим эти объявления:
data[data['price_square'] == 67.3] 
data[data['price_square'] == 346.2] 

# Создам категории в датафрейме data - столбец cat_pricesquare:
def cat_pricesquare(income):
    try:
        if 0 <= income <= 119:
            return 'менее 119 т.р за кв.м'
        elif 120 <= income <= 140:
            return 'от 120 до 140 т.р за кв.м'
        elif 141 <= income <= 152:
            return 'от 141 до 152 т.р за кв.м'
        elif income >= 153:
            return 'свыше 152 т.р за кв.м'
    except:

data['cat_pricesquare'] = data['price_square'].apply(cat_pricesquare)
display(data.sample(5)) 

data_price5 = data.pivot_table(index = 'district', values = 'ID', columns='cat_pricesquare', aggfunc = 'count').reset_index()

# строим гистограммы 

fig = px.histogram(data_price5, # загружаем данные 
                   x=["менее 119 т.р за кв.м", "от 120 до 140 т.р за кв.м", "от 141 до 152 т.р за кв.м", "свыше 152 т.р за кв.м"], # указываем столбец с данными для оси X 
                   y= 'district',
                   title='Распределение') # указываем заголовок 
fig.update_layout(yaxis_title ='Районы') # подпись для оси X 
fig.update_layout(xaxis_title ='Количество комнат') # подпись для оси Y 
fig.show(); # выводим график


        pass
